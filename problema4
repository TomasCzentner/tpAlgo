1.invariante generosOrdenados: tiposOrdenados(generos(p))
	aux tiposOrdenados(x : [T]) : Bool = todos([ord(xi) < ord(xi + 1) | i <-- [0..|x|), i != |x|-1)])
2.invariante actoresOrdenados(actores(p))
	aux actoresOrdenados(as : [Actores]) : Bool = todos([asi-1 <= asi] | i <-- [1..|as|)])
3. problema agruparPelisPorGenero (ps:[Pelicula]) = res : [(Genero, [Pelicula])] {
	todos([mismos(sgd(d), [p | p <-- ps, prm(d) ∈ generos(p)])]) (variante de algo, chino hacete cargo)
}
4. problema generarSagaDePeliculas(as:[Actor], gs:[Genero], nombres:[String]) = res : [Pelicula]
  ∈ ∉ ∃
//Que genera una pelıcula por cada nombre en nombres con los mismos actores y generos para todas. No hay nombres repetidos.
//Vamos con la ida. Como queremos el resultado?
//Si nos damos cuenta, este es el caso opuesto al ejercicio anterior donde sacabamos la informacion de pelicula, ahora tenemos que armar una/s pelicula/s en base a informacion que nos dan (as, gs, nombres).

asegura todos([ mismos ( generos(peli) , elementosSinRepetir(gs)) | peli <-- res]);   
asegura todos([ mismos ( actores(peli) , elementosSinRepetir(as)) | peli <-- res]);
asegura mismos ( listaNombrePelis(res) , elementosSinRepetir(nombres));

aux elementosSinRepetir ( s : [T] ) : [T] = [s[i] | i<- [0..|s|) , not (∃ j <- [0..|s|) , j != i ) s[i] = s[j] ]  
aux listaNombrePelis(listaPelis : [Pelicula]) : [String] = [nombre(peli) | peli < -- listaPelis]

//Si no das generos, ni actores, se puede seguir creando una saga a partir del nombre simplemente?

5.


16. problema venderTicket (c: Cine, p: Pelicula) = result : Ticket {

		requiere: p ∈ peliculas (c);

		modifica: c;

		asegura peliculaDelTicketEsLaDada : pelicula (result) == p ;

		asegura ticketNoEstaUsado : not(usado (result)) ; 

		asegura salaDelTicketEsDelCine : sala(result) ∈ salas (pre(c))  ; // sala(result) ∈ salas(c) no tenes que asegurar esto tambien?

		asegura salaDelTicketEsLaDeLaPeli : sala (result) == sala(pre(c), p) ;

		asegura sumoTicketAUsados : mismos (ticketsVendidosSinUsar( pre(c)) ++ [result], ticketsVendidosSinUsar(c)) ;

		asegura noCambiaNombreDelCine : nombre (c) == nombre (pre(c)) ;

		asegura peliculasDelCineNoCambian : mismos (peliculas (pre (c)), peliculas (c)) ;

		asegura salasDelCineNoCambian : mismos (salas (pre (c)), salas (c)) ;

		asegura salasDeLasPelisNoCambian : todos ([sala (pre (c), pe) == sala (c, pe) | pe <- peliculas (pre (c)) ]) ;

		asegura espectadoresDeLasSalasNoCambian : todos ([espectadores (pre(c), sa) == espectadores (c, sa) | sa <- salas (pre (c)) ]) ;

} 

17. problema ingresarASalas (c: Cine, s: Sala, t: Ticket) {
		requiere: s ∈ salas (c) ;
		requiere: sala (t) == s ;
		requiere: t ∈ ticketsVendidosSinUsar (c) ;
		modifica: c,t ;
		asegura peliculaDelTicketNoCambia : pelicula (pre (t)) == pelicula (t) ;
		asegura salaDelTicketNoCambia : sala (pre (t)) == sala (t) ;
		asegura marcarElTicketComoUsado : usado (t)  ;
		asegura sumarTicketAEspectadores : espectadores (c, s) == espectadores (pre(c), s) + 1 ;
		asegura sacoElTicketDeSinUsar : mismos (ticketsVendidosSinUsar (c), [ti | ti <- ticketsVendidosSinUsar (pre(c)), ti != t]) ;
		asegura nombreDelCineNoCambia : nombre (c) == nombre (pre (c)) ;
		asegura peliculasDelCineNoCambia : peliculas (c) == peliculas (pre (c)) ;
		asegura salasNoCambian : salas (c) == salas (pre (c)) ;
		asegura pelisViejasNoCambianSala : todos( [sala (c, p) == sala (pre(c), p) | p <- peliculas (pre (c) ] ) ;
		asegura espectadoresNoCambian : todos( [espectadores (c, sa) == espectadores (pre(c), sa) | sa <- salas (pre (c)), sa != s]) ;
}